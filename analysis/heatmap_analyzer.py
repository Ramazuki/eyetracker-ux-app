import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import gaussian_kde
import pandas as pd
import os
from datetime import datetime
from scipy.ndimage import gaussian_filter
import glob
from pathlib import Path


def load_gaze_data(csv_filename):
    """
    Returns:
        tuple: (x, y, T, Tn) –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        df = pd.read_csv(csv_filename)
        
        if not all(col in df.columns for col in ['x', 'y', 'T', 'Tn']):
            raise ValueError("CSV —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: x, y, T, Tn")
        
        x = df['x'].values
        y = df['y'].values  
        T = df['T'].values
        Tn = df['Tn'].values
        
        
        return x, y, T, Tn
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None, None


def find_latest_gaze_file():
    gaze_files = glob.glob("data/raw/gaze_data_*.csv")
    if not gaze_files:
        return None
    
    latest_file = max(gaze_files, key=os.path.getctime)
    return latest_file


def setup_theme():
    sns.set_theme(style="white", context="paper")


def extract_boundaries_from_calibration(data_dir="data/raw"):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    data_path = Path(data_dir)
    calib_files = [
        "calib1.csv", "calib2.csv", "calib3.csv", "calib4.csv"
    ]
    
    all_x, all_y = [], []
    
    for file in calib_files:
        file_path = data_path / file
        if file_path.exists():
            df = pd.read_csv(file_path)
            all_x.extend(df['x'].tolist())
            all_y.extend(df['y'].tolist())
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {file}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
    
    if not all_x:
        return None
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ min/max –∑–Ω–∞—á–µ–Ω–∏—è
    boundaries = {
        'x_min': np.min(all_x),
        'x_max': np.max(all_x),
        'y_min': np.min(all_y),
        'y_max': np.max(all_y)
    }
    
    print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã: x=[{boundaries['x_min']:.3f}, {boundaries['x_max']:.3f}], y=[{boundaries['y_min']:.3f}, {boundaries['y_max']:.3f}]")
    return boundaries


def filter_and_normalize_gaze_data(x, y, T, Tn, boundaries):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∑–≥–ª—è–¥–∞ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    if boundaries is None:
        print("‚ùå –ì—Ä–∞–Ω–∏—Ü—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return x, y, T, Tn
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º
    mask = (
        (x >= boundaries['x_min']) & 
        (x <= boundaries['x_max']) &
        (y >= boundaries['y_min']) & 
        (y <= boundaries['y_max'])
    )
    
    x_filtered = x[mask]
    y_filtered = y[mask]
    T_filtered = T[mask]
    Tn_filtered = Tn[mask]
    
    original_count = len(x)
    filtered_count = len(x_filtered)
    
    print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {original_count} -> {filtered_count} —Ç–æ—á–µ–∫ ({(filtered_count/original_count*100):.1f}%)")
    

    x_norm = (x_filtered - boundaries['x_min']) / (boundaries['x_max'] - boundaries['x_min'])
    y_norm = 1.0 - (y_filtered - boundaries['y_min']) / (boundaries['y_max'] - boundaries['y_min'])
    
    
    return x_norm, y_norm, T_filtered, Tn_filtered


def save_heatmap_transparent(fig, filename="heatmap_transparent.png"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º"""
    fig.patch.set_alpha(0)  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω —Ñ–∏–≥—É—Ä—ã
    for ax in fig.axes:
        ax.patch.set_alpha(0)  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –æ—Å–µ–π
    
    fig.savefig(filename, dpi=300, bbox_inches='tight', 
                facecolor='none', edgecolor='none', transparent=True)
    print(f"üíæ –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")


def create_clean_heatmap_image(Z_kde, x_range, y_range, filename="heatmap_clean.png"):
    """–°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã 16:9 –±–µ–∑ —à–∫–∞–ª—ã –∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –Ω—É–ª–µ–≤—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ —Ç–æ—á–Ω–æ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ 16:9 –±–µ–∑ –æ—Å–µ–π –∏ –æ—Ç—Å—Ç—É–ø–æ–≤
    fig = plt.figure(figsize=(16, 9))
    ax = fig.add_axes((0, 0, 1, 1))  # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å—é —Ñ–∏–≥—É—Ä—É
    ax.set_xlim(x_range[0], x_range[1])
    ax.set_ylim(y_range[0], y_range[1])
    ax.axis('off')  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Å–∏ –∏ –ø–æ–¥–ø–∏—Å–∏
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    Z_masked = np.ma.masked_where(Z_kde == 0, Z_kde)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –¥–ª—è –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    im = ax.imshow(Z_masked, extent=(x_range[0], x_range[1], y_range[0], y_range[1]), 
                   origin='lower', cmap='Spectral_r', interpolation='bilinear', 
                   aspect='equal')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
    fig.savefig(filename, dpi=300, bbox_inches='tight', pad_inches=0,
                facecolor='none', edgecolor='none', transparent=True)
    
    plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É —á—Ç–æ–±—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å
    print(f"üíæ –ß–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")


def create_clean_heatmap_opencv(Z_kde, x_range, y_range, filename="heatmap_clean_cv.png"):
    """–°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 16:9 –∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω —á–µ—Ä–µ–∑ OpenCV"""
    try:
        import cv2
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–æ—á–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º 16:9
        width, height = 1920, 1080  
        fig = plt.figure(figsize=(width/100, height/100))
        ax = fig.add_axes((0, 0, 1, 1))
        ax.set_xlim(x_range[0], x_range[1])
        ax.set_ylim(y_range[0], y_range[1])
        ax.axis('off')
        
        im = ax.imshow(Z_kde, extent=(x_range[0], x_range[1], y_range[0], y_range[1]), 
                       origin='lower', cmap='Spectral_r', interpolation='bilinear', 
                       aspect='auto')
        
        temp_filename = "temp_heatmap.png"
        fig.savefig(temp_filename, dpi=100, bbox_inches='tight', pad_inches=0,
                    facecolor='black')
        plt.close(fig)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenCV
        img = cv2.imread(temp_filename, cv2.IMREAD_UNCHANGED)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        if img is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {temp_filename}")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ/—Ç–µ–º–Ω–æ-—Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è Spectral_r
        lower_purple = np.array([100, 30, 30])
        upper_purple = np.array([160, 255, 255])
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
        mask = cv2.inRange(hsv, lower_purple, upper_purple)
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å–∫—É (–¥–µ–ª–∞–µ–º —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏)
        mask_inv = cv2.bitwise_not(mask)
        
        # –°–æ–∑–¥–∞–µ–º 4-–∫–∞–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º
        img_rgba = cv2.cvtColor(img, cv2.COLOR_BGR2BGRA)
        img_rgba[:, :, 3] = mask_inv  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫ —Ç–æ—á–Ω–æ–º—É 16:9 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        target_height = 1080
        target_width = 1920
        if img_rgba.shape[:2] != (target_height, target_width):
            img_rgba = cv2.resize(img_rgba, (target_width, target_height), interpolation=cv2.INTER_LANCZOS4)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cv2.imwrite(filename, img_rgba)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_filename)
        
        print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 16:9 ({target_width}x{target_height}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        
    except ImportError:
        print("‚ùå OpenCV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install opencv-python")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")


def save_analysis_files(x, y, T, Tn, X, Y, Z, output_dir="data/analysis"):
    """ 
    Args:
        x, y: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫
        T, Tn: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
        X, Y: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —Å–µ—Ç–∫–∏
        Z: –º–∞—Ç—Ä–∏—Ü–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ KDE
        output_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    os.makedirs(output_dir, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    kde_matrix = pd.DataFrame(Z)
    kde_matrix.to_csv(f"{output_dir}/kde_heatmap_{timestamp}.csv", index=False)
    
    np.savez(f"{output_dir}/coordinate_grids_{timestamp}.npz", X=X, Y=Y)
    
    
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: {output_dir}")
    print(f"   –°–æ–∑–¥–∞–Ω–æ 3 —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π: {timestamp}")


def compute_kde(data, x_range, y_range, grid_size=100):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç KDE –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    x_grid = np.linspace(x_range[0], x_range[1], grid_size)
    y_grid = np.linspace(y_range[0], y_range[1], grid_size)
    X, Y = np.meshgrid(x_grid, y_grid)
    positions = np.vstack([X.ravel(), Y.ravel()])
    
    kde = gaussian_kde(data, bw_method='scott')
    Z = kde(positions).reshape(grid_size, grid_size)
    
    return X, Y, Z


def plot_scatter_time(x, y, time_values, title_suffix, ax):
    """–°–æ–∑–¥–∞–µ—Ç scatter plot —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if title_suffix == '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏':
        cmap = sns.color_palette("Spectral_r", as_cmap=True)
    else:
        cmap = sns.color_palette("Spectral", as_cmap=True)
    
    scatter = ax.scatter(x, y, c=time_values, s=30, alpha=0.7, cmap=cmap)
    plt.colorbar(scatter, ax=ax, label='–º—Å')
    ax.set_title(f'–¢–æ—á–∫–∏ - {title_suffix}', fontsize=14)
    ax.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
    ax.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)


def plot_contour_time(X, Y, Z, title_suffix, ax):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç—É—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫ –±–µ–∑ –≤–µ—Å–æ–≤"""
    cmap = sns.color_palette("Spectral_r", as_cmap=True)
    
    contour = ax.contourf(X, Y, Z, levels=15, cmap=cmap, alpha=0.7)
    ax.contour(X, Y, Z, levels=15, colors='black', alpha=0.3, linewidths=0.5)
    plt.colorbar(contour, ax=ax, label='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ç–æ—á–µ–∫')
    ax.set_title(f'–ó–æ–Ω—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫ (–±–µ–∑ –≤–µ—Å–æ–≤)', fontsize=14)
    ax.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
    ax.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)


def create_weighted_kde_heatmap(x, y, weights, x_range, y_range, grid_size=100):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è Gaussian KDE —Å –≤–µ—Å–∞–º–∏
    
    Args:
        x, y: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫
        weights: –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã [0;1])
        x_range, y_range: –¥–∏–∞–ø–∞–∑–æ–Ω—ã –æ—Å–µ–π
        grid_size: —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏
    """
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
    x_grid = np.linspace(x_range[0], x_range[1], grid_size)
    y_grid = np.linspace(y_range[0], y_range[1], grid_size)
    X, Y = np.meshgrid(x_grid, y_grid)
    positions = np.vstack([X.ravel(), Y.ravel()])
    
    data = np.vstack([x, y])
    
    kde = gaussian_kde(data, weights=weights, bw_method='scott')
    kde.covariance_factor = lambda: 0.5 * kde.scotts_factor()
    kde._compute_covariance()
    
    Z = kde(positions).reshape(grid_size, grid_size)
    
    return X, Y, Z


def create_gaze_heatmap(csv_filename=None, use_calibration=True):
    setup_theme()
    
    if csv_filename is None:
        csv_filename = find_latest_gaze_file()
        if csv_filename is None:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞ (gaze_data_*.csv)")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫–∏: data/raw/ –∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
            return
        print(f"üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {csv_filename}")
    
    x, y, T, Tn = load_gaze_data(csv_filename)
    if x is None:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if use_calibration:
        boundaries = extract_boundaries_from_calibration()
        x, y, T, Tn = filter_and_normalize_gaze_data(x, y, T, Tn, boundaries)
        # –î–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Å–µ–≥–¥–∞ [0, 1]
        x_range = (0, 1)
        y_range = (0, 1)
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å –æ—Ç—Å—Ç—É–ø–æ–º
        x_range = (float(np.min(x)) - 0.05, float(np.max(x)) + 0.05) # type: ignore
        y_range = (float(np.min(y)) - 0.05, float(np.max(y)) + 0.05) # type: ignore
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0;1]
    T_normalized = (T - np.min(T)) / (np.max(T) - np.min(T)) if len(np.unique(T)) > 1 else np.zeros_like(T) # type: ignore
    Tn_normalized = (Tn - np.min(Tn)) / (np.max(Tn) - np.min(Tn)) if len(np.unique(Tn)) > 1 else np.zeros_like(Tn) # type: ignore
    
    

    data = np.vstack([x, y]) # type: ignore
    X, Y, Z_kde = compute_kde(data, x_range, y_range)
    
    X_time, Y_time, Z_time = create_weighted_kde_heatmap(x, y, 1.0 - T_normalized, x_range, y_range)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º T
    X_duration, Y_duration, Z_duration = create_weighted_kde_heatmap(x, y, Tn_normalized, x_range, y_range)
    
    fig1, axes1 = plt.subplots(1, 3, figsize=(18, 6))
    fig1.suptitle('–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ (T)\n–ö—Ä–∞—Å–Ω—ã–π = —Ä–∞–Ω–Ω–µ–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –°–∏–Ω–∏–π = –ø–æ–∑–¥–Ω–µ–µ –≤–Ω–∏–º–∞–Ω–∏–µ', 
                  fontsize=16, fontweight='bold')
    
    plot_scatter_time(x, y, T, '–≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏', axes1[0])
    axes1[0].set_xlim(0, 1)
    axes1[0].set_ylim(0, 1)
    
    im1 = axes1[1].imshow(Z_time, extent=[x_range[0], x_range[1], y_range[0], y_range[1]], 
                         origin='lower', cmap='Spectral_r', alpha=0.8)
    #axes1[1].scatter(x, y, s=10, c='black', alpha=0.3)
    plt.colorbar(im1, ax=axes1[1], label='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (—Ä–∞–Ω–Ω–µ–µ –≤–Ω–∏–º–∞–Ω–∏–µ)')
    axes1[1].set_title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ - —Ä–∞–Ω–Ω–µ–µ –≤–Ω–∏–º–∞–Ω–∏–µ', fontsize=14)
    axes1[1].set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
    axes1[1].set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
    
    plot_contour_time(X, Y, Z_kde, '–∑–æ–Ω—ã —Ä–∞–Ω–Ω–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è', axes1[2])
    
    plt.tight_layout()
    
    # === –í–¢–û–†–û–ï –û–ö–ù–û: –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∞—Ü–∏–π (Tn) ===
    fig2, axes2 = plt.subplots(1, 3, figsize=(18, 6))
    fig2.suptitle('–ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∞—Ü–∏–π (Tn)\n–ö—Ä–∞—Å–Ω—ã–π = –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏, –°–∏–Ω–∏–π = –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏', 
                  fontsize=16, fontweight='bold')
    
    plot_scatter_time(x, y, Tn, '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–∏', axes2[0])
    axes2[0].set_xlim(0, 1)
    axes2[0].set_ylim(0, 1)
    
    im2 = axes2[1].imshow(Z_duration, extent=[x_range[0], x_range[1], y_range[0], y_range[1]], 
                         origin='lower', cmap='Spectral_r', alpha=0.8)
    #axes2[1].scatter(x, y, s=10, c='black', alpha=0.3)
    plt.colorbar(im2, ax=axes2[1], label='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏)')
    axes2[1].set_title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–∫—Å–∞—Ü–∏–π', fontsize=14)
    axes2[1].set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
    axes2[1].set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
    
    plot_contour_time(X, Y, Z_kde, '–∑–æ–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–∫—Å–∞—Ü–∏–π', axes2[2])
    
    plt.tight_layout()
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ—Å—Ç—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ —Ñ–æ–Ω–∞
    fig_simple = plt.figure(figsize=(16, 9))
    plt.imshow(Z_kde, extent=(x_range[0], x_range[1], y_range[0], y_range[1]), 
               origin='lower', cmap='Spectral_r', alpha=0.8, interpolation='bilinear')
    plt.colorbar(label='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–∑–≥–ª—è–¥–æ–≤')
    plt.title('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤–∑–≥–ª—è–¥–æ–≤', fontsize=16, fontweight='bold')
    if use_calibration:
        plt.xlabel('X (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)', fontsize=12)
        plt.ylabel('Y (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)', fontsize=12)
    else:
        plt.xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
        plt.ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
    plt.tight_layout()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    import re
    test_name = "unknown"
    if csv_filename:
        match = re.search(r'gaze_data_(.+?)\.csv', csv_filename)
        if match:
            test_name = match.group(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ OpenCV –≤–µ—Ä—Å–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–∞
    output_filename = f"{test_name}.png"
    create_clean_heatmap_opencv(Z_kde, x_range, y_range, output_filename)
    
    save_analysis_files(x, y, T, Tn, X, Y, Z_kde)
    
    plt.show()
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(x)} —Ç–æ—á–µ–∫ —Ñ–∏–∫—Å–∞—Ü–∏–∏")


def analyze_all_gaze_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞"""
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –æ–±–µ–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
    gaze_files = glob.glob("data/raw/gaze_data_*.csv") + glob.glob("gaze_data_*.csv")
    
    if not gaze_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫–∏: data/raw/ –∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É")
        return
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(gaze_files)} —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏:")
    for i, file in enumerate(gaze_files, 1):
        file_time = datetime.fromtimestamp(os.path.getctime(file))
        print(f"   {i}. {file} (—Å–æ–∑–¥–∞–Ω: {file_time.strftime('%Y-%m-%d %H:%M:%S')})")
    
    choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (1-{len(gaze_files)}) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ: ").strip()
    
    if choice == "":
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
        selected_file = max(gaze_files, key=os.path.getctime)
    else:
        try:
            index = int(choice) - 1
            if 0 <= index < len(gaze_files):
                selected_file = gaze_files[index]
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
                return
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
            return
    
    print(f"üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file}")
    create_gaze_heatmap(selected_file)


def main():
    """–§—É–Ω–∫—Ü–∏—è main –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üéØ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤—ã—Ö –∫–∞—Ä—Ç")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
    gaze_files = glob.glob("data/raw/gaze_data_*.csv") + glob.glob("gaze_data_*.csv")
    
    if not gaze_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞ (gaze_data_*.csv)")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç—Ä–µ–∫–µ—Ä –∏ —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        print("   –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")
    elif len(gaze_files) == 1:
        print(f"üìÅ –ù–∞–π–¥–µ–Ω 1 —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏: {gaze_files[0]}")
        create_gaze_heatmap(gaze_files[0])
    else:
        analyze_all_gaze_files()


if __name__ == "__main__":
    main() 