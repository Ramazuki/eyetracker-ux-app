#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–π—Ç—Ä–µ–∫–∏–Ω–≥–∞

–õ–æ–≥–∏–∫–∞:
1. –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç–∞ (–æ—Ç —Ñ—Ä–æ–Ω—Ç–∞ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)
2. –°–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —ç—Ç–æ–º—É —Ç–æ–∫–µ–Ω—É
3. –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ü–∏—é
4. –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ - –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
5. –ü—Ä–∏ —Å—Ç–æ–ø–µ - —Å–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
"""
import asyncio
import aiohttp
import csv
import random
import time
import logging
from typing import Dict, Optional
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
import tempfile

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class TrackingSession:
    """–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞"""
    token: str
    stage_id: int
    start_time: float
    data_points: list
    test_number: Optional[int] = None
    calibration_point: Optional[int] = None

class EyeTrackingClient:
    """–ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–π—Ç—Ä–µ–∫–∏–Ω–≥–∞"""
    
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        self.api_base_url = api_base_url
        self.current_token: Optional[str] = None
        self.active_sessions: Dict[int, TrackingSession] = {}
        self.running = True
        self.last_command_check = 0
        self.processed_stop_commands: set = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã stop
        
    async def start(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üéØ Eye Tracking Client –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç–∞
        await self.get_test_token()
        
        if not self.current_token:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        logger.info(f"‚úÖ –†–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ—Å—Ç–æ–º: {self.current_token[:16]}...")
        logger.info("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await asyncio.gather(
            self.simulate_eye_tracking(),
            self.listen_for_commands(),
            self.status_reporter()
        )
    
    async def get_test_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Ç–µ—Å—Ç–∞"""
        print("\nüîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Ç–µ—Å—Ç–∞:")
        print("1. –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é")
        print("2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-2): ").strip()
        
        if choice == "1":
            token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç–∞: ").strip()
            if await self.validate_token(token):
                self.current_token = token
                logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç: {token[:16]}...")
            else:
                logger.error("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
        elif choice == "2":
            test_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞: ").strip() or "–¢–µ—Å—Ç –∞–π—Ç—Ä–µ–∫–∏–Ω–≥–∞"
            token = await self.create_test(test_name)
            if token:
                self.current_token = token
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç: {token[:16]}...")
        else:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    async def validate_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        return True  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    async def create_test(self, test_name: str) -> Optional[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        url = f"{self.api_base_url}/tracking/test/create"
        data = {"name": test_name}
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        return result["token"]
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {response.status}")
                        return None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
                return None
    
    async def simulate_eye_tracking(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–π—Ç—Ä–µ–∫–∏–Ω–≥–∞"""
        while self.running:
            await asyncio.sleep(0.1)  # –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            
            current_time = time.time()
            
            for stage_id, session in self.active_sessions.items():
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–π—Ç—Ä–µ–∫–∏–Ω–≥–∞
                x = random.uniform(0, 1920)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                y = random.uniform(0, 1080)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                timestamp = current_time - session.start_time
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
                session.data_points.append({
                    'timestamp': timestamp,
                    'x': x,
                    'y': y,
                    'pupil_diameter': random.uniform(2.0, 8.0),
                    'confidence': random.uniform(0.8, 1.0)
                })
    
    async def listen_for_commands(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.current_token:
            return
        
        while self.running:
            await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            try:
                commands = await self.fetch_commands()
                if commands:
                    await self.process_commands(commands)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
    
    async def fetch_commands(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –æ—Ç API —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.current_token:
            return []
            
        url = f"{self.api_base_url}/tracking/test/{self.current_token}/commands"
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        return []
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–∞–Ω–¥: {e}")
                return []
    
    async def process_commands(self, commands: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        for command in commands:
            stage_id = command.get("stage_id")
            command_type = command.get("command")
            status = command.get("status")
            
            if command_type == "start" and status == "started":
                if stage_id not in self.active_sessions:
                    await self.handle_start_command(command)
            elif command_type == "stop" and status == "stopped":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ stop –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                if stage_id in self.active_sessions and stage_id not in self.processed_stop_commands:
                    await self.handle_stop_command(stage_id)
                    self.processed_stop_commands.add(stage_id)
    
    async def handle_start_command(self, command: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
        if not self.current_token:
            return
            
        stage_id = command.get("stage_id")
        if not isinstance(stage_id, int):
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π stage_id: {stage_id}")
            return
            
        test_number = command.get("test_number")
        calibration_point = command.get("calibration_point")
        
        logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–ê –ö–û–ú–ê–ù–î–ê: START #{stage_id}")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
        session = TrackingSession(
            token=self.current_token,
            stage_id=stage_id,
            start_time=time.time(),
            data_points=[],
            test_number=test_number,
            calibration_point=calibration_point
        )
        self.active_sessions[stage_id] = session
        logger.info(f"üöÄ –ó–ê–ü–£–©–ï–ù —ç—Ç–∞–ø #{stage_id} (—Ç–µ—Å—Ç:{test_number}, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞:{calibration_point})")
    
    async def handle_stop_command(self, stage_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–æ–ø"""
        if not self.current_token:
            return
            
        logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–ê –ö–û–ú–ê–ù–î–ê: STOP #{stage_id}")
        
        if stage_id in self.active_sessions:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await self.save_and_upload_data(stage_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            del self.active_sessions[stage_id]
            logger.info(f"üõë –û–°–¢–ê–ù–û–í–õ–ï–ù —ç—Ç–∞–ø #{stage_id}")
    

    
    async def status_reporter(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã"""
        while self.running:
            await asyncio.sleep(1)  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
            if self.active_sessions:
                active_stages = list(self.active_sessions.keys())
                points_count = sum(len(s.data_points) for s in self.active_sessions.values())
                logger.info(f"‚ö° –ê–ö–¢–ò–í–ù–´–ï –≠–¢–ê–ü–´: {active_stages} | –°–æ–±—Ä–∞–Ω–æ —Ç–æ—á–µ–∫: {points_count}")
            # –£–±—Ä–∞–ª —Å–ø–∞–º "–æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥" - –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö
    
    async def save_and_upload_data(self, stage_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–∞"""
        if stage_id not in self.active_sessions:
            logger.error(f"‚ùå –°–µ—Å—Å–∏—è {stage_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        session = self.active_sessions[stage_id]
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        await self.create_heatmap_file(session, stage_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏
        await self.create_heatmap_first_file(session, stage_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∞—Ü–∏–π
        await self.create_heatmap_long_file(session, stage_id)
    
    async def create_heatmap_file(self, session: TrackingSession, stage_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
            temp_path = f.name
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            writer = csv.writer(f)
            writer.writerow(['timestamp', 'x', 'y', 'pupil_diameter', 'confidence'])
            
            for point in session.data_points:
                writer.writerow([
                    f"{point['timestamp']:.3f}",
                    f"{point['x']:.1f}",
                    f"{point['y']:.1f}",
                    f"{point['pupil_diameter']:.2f}",
                    f"{point['confidence']:.3f}"
                ])
        
        filename = f"heatmap_{stage_id}.csv"
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filename} ({len(session.data_points)} —Ç–æ—á–µ–∫)")
        
        await self.upload_data_file(temp_path, filename, session.token, stage_id)
        Path(temp_path).unlink()
    
    async def create_heatmap_first_file(self, session: TrackingSession, stage_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
            temp_path = f.name
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏
            # –†–∞–∑–±–∏–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞ —Å–µ—Ç–∫—É –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏
            writer = csv.writer(f)
            writer.writerow(['x', 'y', 'time_to_first_fixation'])
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 20x15 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            for grid_x in range(0, 1920, 96):  # 20 –æ–±–ª–∞—Å—Ç–µ–π –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                for grid_y in range(0, 1080, 72):  # 15 –æ–±–ª–∞—Å—Ç–µ–π –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
                    first_fixation_time = None
                    area_center_x = grid_x + 48
                    area_center_y = grid_y + 36
                    
                    for point in session.data_points:
                        if (grid_x <= point['x'] < grid_x + 96 and 
                            grid_y <= point['y'] < grid_y + 72 and
                            point['confidence'] > 0.7):  # –¢–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏
                            time_from_start = (point['timestamp'] - session.start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                            if first_fixation_time is None or time_from_start < first_fixation_time:
                                first_fixation_time = time_from_start
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (0 –µ—Å–ª–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ)
                    writer.writerow([
                        area_center_x,
                        area_center_y,
                        f"{first_fixation_time:.1f}" if first_fixation_time else "0"
                    ])
        
        filename = f"heatmap_first_{stage_id}.csv"
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filename} (–≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏)")
        
        await self.upload_data_file(temp_path, filename, session.token, stage_id)
        Path(temp_path).unlink()
    
    async def create_heatmap_long_file(self, session: TrackingSession, stage_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∞—Ü–∏–π"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as f:
            temp_path = f.name
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–∫—Å–∞—Ü–∏–π
            writer = csv.writer(f)
            writer.writerow(['x', 'y', 'fixation_duration'])
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –≤ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            fixations = []
            current_fixation = None
            
            for point in session.data_points:
                if point['confidence'] < 0.7:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
                    continue
                    
                if current_fixation is None:
                    current_fixation = {
                        'x': point['x'],
                        'y': point['y'],
                        'start_time': point['timestamp'],
                        'end_time': point['timestamp'],
                        'points': [point]
                    }
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–ª–∏–∑–∫–æ –ª–∏ –∫ —Ç–µ–∫—É—â–µ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏
                    distance = ((point['x'] - current_fixation['x'])**2 + 
                               (point['y'] - current_fixation['y'])**2)**0.5
                    
                    if distance < 50:  # –†–∞–¥–∏—É—Å —Ñ–∏–∫—Å–∞—Ü–∏–∏ 50 –ø–∏–∫—Å–µ–ª–µ–π
                        current_fixation['end_time'] = point['timestamp']
                        current_fixation['points'].append(point)
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä —Ñ–∏–∫—Å–∞—Ü–∏–∏
                        current_fixation['x'] = sum(p['x'] for p in current_fixation['points']) / len(current_fixation['points'])
                        current_fixation['y'] = sum(p['y'] for p in current_fixation['points']) / len(current_fixation['points'])
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∏–∫—Å–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è
                        duration = (current_fixation['end_time'] - current_fixation['start_time']) * 1000
                        if duration >= 100:  # –ú–∏–Ω–∏–º—É–º 100 –º—Å
                            fixations.append({
                                'x': current_fixation['x'],
                                'y': current_fixation['y'],
                                'duration': duration
                            })
                        
                        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏–∫—Å–∞—Ü–∏—é
                        current_fixation = {
                            'x': point['x'],
                            'y': point['y'],
                            'start_time': point['timestamp'],
                            'end_time': point['timestamp'],
                            'points': [point]
                        }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–∏–∫—Å–∞—Ü–∏—é
            if current_fixation:
                duration = (current_fixation['end_time'] - current_fixation['start_time']) * 1000
                if duration >= 100:
                    fixations.append({
                        'x': current_fixation['x'],
                        'y': current_fixation['y'],
                        'duration': duration
                    })
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–∫—Å–∞—Ü–∏–∏
            for fixation in fixations:
                writer.writerow([
                    f"{fixation['x']:.1f}",
                    f"{fixation['y']:.1f}",
                    f"{fixation['duration']:.1f}"
                ])
        
        filename = f"heatmap_long_{stage_id}.csv"
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filename} ({len(fixations)} —Ñ–∏–∫—Å–∞—Ü–∏–π)")
        
        await self.upload_data_file(temp_path, filename, session.token, stage_id)
        Path(temp_path).unlink()
    
    async def upload_data_file(self, file_path: str, filename: str, token: str, stage_id: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        url = f"{self.api_base_url}/data/upload"
        
        async with aiohttp.ClientSession() as session:
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É
                data = aiohttp.FormData()
                data.add_field('test_token', token)
                data.add_field('stage_id', str(stage_id))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(file_path, 'rb') as f:
                    data.add_field('file', f, filename=filename, content_type='text/csv')
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            logger.info(f"üì§ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {result.get('file_path', filename)}")
                        else:
                            error_text = await response.text()
                            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {response.status}: {error_text}")
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    
    async def send_start_command(self, token: str, test_number: Optional[int], 
                               calibration_point: Optional[int]) -> Optional[dict]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
        url = f"{self.api_base_url}/tracking/test/{token}/start"
        data = {}
        
        if test_number is not None:
            data["test_number"] = test_number
        if calibration_point is not None:
            data["calibration_point"] = calibration_point
            
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç: {response.status}")
                        return None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç: {e}")
                return None
    
    async def send_stop_command(self, token: str, stage_id: int) -> Optional[dict]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–æ–ø"""
        url = f"{self.api_base_url}/tracking/test/{token}/stop"
        data = {"stage_id": stage_id}
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–æ–ø: {response.status}")
                        return None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–æ–ø: {e}")
                return None
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if self.current_token:
            for stage_id in list(self.active_sessions.keys()):
                await self.save_and_upload_data(stage_id)
                await self.send_stop_command(self.current_token, stage_id)
        
        logger.info("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    client = EyeTrackingClient()
    
    try:
        await client.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await client.shutdown()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await client.shutdown()

if __name__ == "__main__":
    asyncio.run(main()) 