import httpx
import socket
import threading
import time
import xml.etree.ElementTree as ET
from datetime import datetime
import sys
import csv
import os
import math
from typing import Optional, List, Tuple


class GazepointTracker:
    def __init__(self, host='127.0.0.1', port=4242):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ Gazepoint
        :param host: IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ Gazepoint (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é localhost)
        :param port: –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ Gazepoint (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4242)
        """
        self.host = host
        self.port = port
        self.socket: Optional[socket.socket] = None
        self.connected = False
        self.tracking = False
        self.data_thread = None
        self.control_thread = None
        self.stop_flag = threading.Event()
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è CSV
        self.csv_data: List[Tuple[float, float, float, float]] = []
        self.start_time = 0.0
        self.last_time = 0.0
        self.last_x = None
        self.last_y = None
        self.position_threshold = 0.01  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö" –ø–æ–∑–∏—Ü–∏–π
        self.current_fixation_start = 0.0
        
        # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.csv_filename = ""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.max_duration = None  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.tracking_start_time = 0.0
        
        # –§–∞–π–ª –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.command_file = "tracker_commands.txt"
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Gazepoint"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.connect((self.host, self.port))
            self.connected = True
            print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Gazepoint —Å–µ—Ä–≤–µ—Ä –Ω–∞ {self.host}:{self.port}")
            return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.socket:
            self.socket.close()
            self.connected = False
            print("‚úì –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Gazepoint")
    
    def send_command(self, command):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ XML –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.connected or not self.socket:
            print("‚úó –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return False
        
        try:
            message = f"{command}\r\n"
            self.socket.send(message.encode('utf-8'))
            return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False
    
    def receive_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.connected or not self.socket:
            return None
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            self.socket.settimeout(1.0)
            data = self.socket.recv(1024).decode('utf-8')
            return data.strip()
        except socket.timeout:
            return None
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def configure_tracker(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Best POG –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞...")
        
        # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏
        self.send_command('<SET ID="ENABLE_SEND_TIME" STATE="1" />')
        time.sleep(0.1)
        
        # –í–∫–ª—é—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–∞–∫–µ—Ç–æ–≤
        self.send_command('<SET ID="ENABLE_SEND_COUNTER" STATE="1" />')
        time.sleep(0.1)
        
        # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É Best POG
        self.send_command('<SET ID="ENABLE_SEND_POG_BEST" STATE="1" />')
        time.sleep(0.1)
        
        print("‚úì –¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def start_tracking(self, max_duration_sec=None):
        """
        –ù–∞—á–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        :param max_duration_sec: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.connected:
            print("‚úó –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
        self.configure_tracker()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.max_duration = max_duration_sec
        self.tracking_start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª CSV –≤ –ø–∞–ø–∫–µ data/raw
        os.makedirs("data/raw", exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.csv_filename = f"data/raw/gaze_data_{timestamp}.csv"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        self.csv_data = []
        self.start_time = time.time() * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_time = self.start_time
        self.last_x = None
        self.last_y = None
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ CSV
        with open(self.csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['x', 'y', 'T', 'Tn'])
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥
        with open(self.command_file, 'w') as f:
            f.write("")
        
        # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
        success = self.send_command('<SET ID="ENABLE_SEND_DATA" STATE="1" />')
        if success:
            self.tracking = True
            self.stop_flag.clear()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.data_thread = threading.Thread(target=self._data_loop, daemon=True)
            self.data_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–º–∞–Ω–¥
            self.control_thread = threading.Thread(target=self._control_loop, daemon=True)
            self.control_thread.start()
            
            print("üéØ –ù–∞—á–∞—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∞–π—Ç—Ä–µ–∫–µ—Ä–∞")
            print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {self.csv_filename}")
            
            if max_duration_sec:
                print(f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {max_duration_sec} —Å–µ–∫—É–Ω–¥")
            
            print("üí° –°–ø–æ—Å–æ–±—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
            print("   1. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)")
            print(f"   2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª '{self.command_file}' —Å –∫–æ–º–∞–Ω–¥–æ–π 'finish'")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python control_tracker.py finish' –≤ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Å–æ–ª–∏")
            print("   4. Ctrl+C –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            
            return True
        else:
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
            return False
    
    def stop_tracking(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        if self.tracking:
            # –í—ã–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
            self.send_command('<SET ID="ENABLE_SEND_DATA" STATE="0" />')
            self.tracking = False
            self.stop_flag.set()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–∏–∫—Å–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.last_x is not None and self.last_y is not None:
                current_time_ms = time.time() * 1000
                T = current_time_ms - self.start_time
                Tn = current_time_ms - self.last_time
                self.csv_data.append((self.last_x, self.last_y, T, Tn))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
            self._save_csv_data()
            
            print("‚èπÔ∏è –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.csv_data)} –∑–∞–ø–∏—Å–µ–π –≤ {self.csv_filename}")
            return True
        return False
    
    def _save_csv_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        if self.csv_data and self.csv_filename:
            with open(self.csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['x', 'y', 'T', 'Tn'])
                writer.writerows(self.csv_data)
    
    def _is_same_position(self, x1, y1, x2, y2):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –¥–≤–µ —Ç–æ—á–∫–∏ –≤ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Ä–æ–≥–∞)"""
        if x2 is None or y2 is None:
            return False
        distance = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
        return distance < self.position_threshold
    
    def _control_loop(self):
        """–¶–∏–∫–ª –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ–º–∞–Ω–¥ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        while self.tracking and not self.stop_flag.is_set():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if self.max_duration:
                    elapsed = time.time() - self.tracking_start_time
                    if elapsed >= self.max_duration:
                        print(f"\n‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.max_duration} —Å–µ–∫—É–Ω–¥")
                        self.stop_tracking()
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥
                if os.path.exists(self.command_file):
                    try:
                        with open(self.command_file, 'r') as f:
                            command = f.read().strip().lower()
                        
                        if command == 'finish' or command == 'stop':
                            print(f"\nüìÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{command}' –∏–∑ —Ñ–∞–π–ª–∞")
                            self.stop_tracking()
                            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥
                            os.remove(self.command_file)
                            break
                        elif command == 'status':
                            elapsed = time.time() - self.tracking_start_time
                            print(f"\nüîÑ –°—Ç–∞—Ç—É—Å: —Å–æ–±—Ä–∞–Ω–æ {len(self.csv_data)} –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ—à–ª–æ {elapsed:.1f} —Å–µ–∫")
                            # –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                            with open(self.command_file, 'w') as f:
                                f.write("")
                    except Exception:
                        pass
                
                time.sleep(0.5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception:
                break
    
    def _data_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        while self.tracking and self.connected and not self.stop_flag.is_set():
            data = self.receive_data()
            if data:
                self._parse_and_display_data(data)
    
    def _parse_and_display_data(self, data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ XML –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò—â–µ–º REC —Ç–µ–≥–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
            if '<REC' in data and '/>' in data:
                # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π REC —Ç–µ–≥ –æ—Ç–¥–µ–ª—å–Ω–æ
                lines = data.split('\r\n')
                for line in lines:
                    line = line.strip()
                    if line.startswith('<REC') and line.endswith('/>'):
                        self._parse_rec_data(line)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥
            pass
    
    def _parse_rec_data(self, rec_line):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ REC"""
        try:
            # –ü–∞—Ä—Å–∏–º XML
            root = ET.fromstring(rec_line)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            time_val = root.get('TIME')
            bpogx = root.get('BPOGX')
            bpogy = root.get('BPOGY')
            bpogv = root.get('BPOGV')
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ Best POG
            if time_val and bpogx and bpogy and bpogv:
                current_x = float(bpogx)
                current_y = float(bpogy)
                is_valid = bpogv == "1"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if is_valid and current_x > 0 and current_y > 0:
                    current_time_ms = time.time() * 1000
                    T = current_time_ms - self.start_time
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è
                    if not self._is_same_position(current_x, current_y, self.last_x, self.last_y):
                        # –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ñ–∏–∫—Å–∞—Ü–∏—é (–µ—Å–ª–∏ –±—ã–ª–∞)
                        if self.last_x is not None and self.last_y is not None:
                            # –í—Ä–µ–º—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                            Tn = current_time_ms - self.last_time
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ CSV
                            self.csv_data.append((self.last_x, self.last_y, T, Tn))
                            
                            # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
                            timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
                            elapsed = time.time() - self.tracking_start_time
                            print(f"[{timestamp}] POG: ({self.last_x:.4f}, {self.last_y:.4f}) T={T:.0f}ms Tn={Tn:.0f}ms | –ó–∞–ø–∏—Å–µ–π: {len(self.csv_data)} | –í—Ä–µ–º—è: {elapsed:.1f}—Å")
                            
                            self.last_time = current_time_ms
                        
                        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏–∫—Å–∞—Ü–∏—é
                        self.last_x = current_x
                        self.last_y = current_y
                        self.current_fixation_start = current_time_ms
                    
                    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Ç–∞ –∂–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ñ–∏–∫—Å–∞—Ü–∏—é (–Ω–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å)
                    
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            pass
    
    def run_with_commands(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥"""
        print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
        print("- –í–≤–µ–¥–∏—Ç–µ 'start' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("- –í–≤–µ–¥–∏—Ç–µ 'start 10' –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 10 —Å–µ–∫—É–Ω–¥")
        print("- –í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        
        while True:
            try:
                command = input("\n> ").strip().lower()
                
                if command.startswith('start'):
                    if not self.tracking:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                        parts = command.split()
                        duration = None
                        if len(parts) > 1:
                            try:
                                duration = int(parts[1])
                            except ValueError:
                                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: start 10")
                                continue
                        
                        if self.start_tracking(duration):
                            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
                            try:
                                while self.tracking:
                                    time.sleep(1)
                            except KeyboardInterrupt:
                                print("\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                                self.stop_tracking()
                    else:
                        print("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
                
                elif command == 'quit' or command == 'exit':
                    break
                
                elif command == 'help' or command == '?':
                    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                    print("  start     - –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
                    print("  start N   - –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä –Ω–∞ N —Å–µ–∫—É–Ω–¥")
                    print("  quit      - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                
                elif command != '':
                    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
                    
            except (EOFError, KeyboardInterrupt):
                break


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üéØ Gazepoint Eye Tracker v2.0 - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö Best POG")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
    tracker = GazepointTracker()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    if not tracker.connect():
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Gazepoint")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. Gazepoint Control –∑–∞–ø—É—â–µ–Ω")
        print("2. –ê–π—Ç—Ä–µ–∫–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
        print(f"3. –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {tracker.host}:{tracker.port}")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        tracker.run_with_commands()
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏–Ω–≥ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
        if tracker.tracking:
            tracker.stop_tracking()
        tracker.disconnect()
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main() 